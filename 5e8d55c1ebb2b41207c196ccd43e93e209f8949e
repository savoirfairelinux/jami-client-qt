{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "74366b65_773e0b78",
        "filename": "src/mainapplication.cpp",
        "patchSetId": 20
      },
      "lineNbr": 391,
      "author": {
        "id": 856
      },
      "writtenOn": "2022-03-03T20:37:30Z",
      "side": 1,
      "message": "either check the \u0027context\u0027 pointer before use, or assert if it must not fail.",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d395c35_c63a4209",
        "filename": "src/mainapplication.cpp",
        "patchSetId": 20
      },
      "lineNbr": 391,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-03T21:29:49Z",
      "side": 1,
      "message": "\"The root context is automatically created by the QQmlEngine\"",
      "parentUuid": "74366b65_773e0b78",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4479f9df_ef292eaf",
        "filename": "src/mainapplication.cpp",
        "patchSetId": 20
      },
      "lineNbr": 391,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-03T22:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d395c35_c63a4209",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb27c1e3_2b5918f7",
        "filename": "src/mainapplication.cpp",
        "patchSetId": 20
      },
      "lineNbr": 391,
      "author": {
        "id": 856
      },
      "writtenOn": "2022-03-04T14:47:11Z",
      "side": 1,
      "message": "I would have put an assert then (assert(engine_-\u003erootContext())), but no big deal.",
      "parentUuid": "4479f9df_ef292eaf",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8cececbe_fd690aad",
        "filename": "src/videodevices.cpp",
        "patchSetId": 20
      },
      "lineNbr": 490,
      "author": {
        "id": 856
      },
      "writtenOn": "2022-03-03T20:37:30Z",
      "side": 1,
      "message": "clean up",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43dfc589_92c7d9e2",
        "filename": "src/videodevices.cpp",
        "patchSetId": 20
      },
      "lineNbr": 490,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-03T21:29:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cececbe_fd690aad",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd203911_1f218619",
        "filename": "src/videoprovider.cpp",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 856
      },
      "writtenOn": "2022-03-03T20:37:30Z",
      "side": 1,
      "message": "as discussed, the the ownership of avframe will be given to the subscriber (Daemon), but the videoFrame instance will still be owned by the VideoProvider (client)",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd0767c2_811ca18d",
        "filename": "src/videoprovider.cpp",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-03T21:29:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dd203911_1f218619",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "186eeadb_e05657b1",
        "filename": "src/videoprovider.cpp",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-03T22:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd0767c2_811ca18d",
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "491c34f6_8cb11d1f",
        "filename": "src/videoprovider.cpp",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 856
      },
      "writtenOn": "2022-03-04T14:47:11Z",
      "side": 1,
      "message": "The upcoming comment is not directly to this patch.\nThe color space is set to RGBA here, and set again in the Daemon.The format should not be hard-coded, but rather configured or negotiated with the Daemon. The color space conversion (as done by sw_scale) would take place only if the formats mismatch.\nBoth ffmpeg and Qt support a large set of color spaces, and the conversion should rarely be needed.",
      "range": {
        "startLine": 141,
        "startChar": 3,
        "endLine": 141,
        "endChar": 38
      },
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94fae333_0c3f2a0b",
        "filename": "src/videoprovider.cpp",
        "patchSetId": 20
      },
      "lineNbr": 141,
      "author": {
        "id": 90
      },
      "writtenOn": "2022-03-04T19:04:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "491c34f6_8cb11d1f",
      "range": {
        "startLine": 141,
        "startChar": 3,
        "endLine": 141,
        "endChar": 38
      },
      "revId": "5e8d55c1ebb2b41207c196ccd43e93e209f8949e",
      "serverId": "1e26b4c1-6b8c-47ff-9df7-501b633d3b5a"
    }
  ]
}