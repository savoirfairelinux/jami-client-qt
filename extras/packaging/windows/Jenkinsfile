pipeline {
    agent { label 'builder-win-new' }

    environment {
        DL_SSH_KEY = '5825b39b-dfc6-435f-918e-12acc1f56221'
        CLIENT_DIR = "${pwd()}"
        DAEMON_DIR = "${env.CLIENT_DIR}\\daemon"
        INSTALLER_DIR = "${env.CLIENT_DIR}\\JamiInstaller\\bin\\Release\\en-us"
    }

    options {
        ansiColor('xterm')
    }

    parameters {
        string(name: 'VERSION_TAG',
                description: 'Version associated with the git tag.')
        string(name: 'GIT_REFSPEC',
                defaultValue: 'refs/heads/master',
                description: 'The git refspec to fetch.')
        booleanParam(name: 'ARCHIVE',
                defaultValue: false,
                description: 'Do not propagate the release artifacts to the download server.')
        booleanParam(name: 'BETA',
                defaultValue: false,
                description: 'Boolean value for BETA builds.')
    }

    stages {
        stage('Check version tag') {
            steps {
                script {
                    if (params.VERSION_TAG == null || params.VERSION_TAG == '') {
                        error("VERSION_TAG parameter is required")
                    }
                }
            }
        }

        stage('Init repository') {
            steps {
                dir(CLIENT_DIR) {
                    bat """
                        git submodule update --init --recursive
                    """
                }
            }
        }

        stage('Build libjami') {
            steps {
                dir(DAEMON_DIR) {
                    bat """
                        python extras/scripts/winmake.py --base-dir compat/msvc
                    """
                }
            }
        }

        stage('Build client') {
            steps {
                dir(CLIENT_DIR) {
                    bat """
                        python extras/scripts/build-windows.py --init || exit /b 1
                        python extras/scripts/build-windows.py --qt=${QT_LATEST_PATH} --build-version=${VERSION_TAG} --enable-crash-reports --crash-report-url=${CRASH_REPORT_URL} --beta || exit /b 1
                    """
                }
            }
        }

        stage('Create Client Installer') {
            steps {
                dir(CLIENT_DIR) {
                    bat """
                        cd x64\\Release

                        set CS_BASE_DIR=C:\\Users\\jenkins-jami\\jenkins\\signing
                        set CS_TIMESTAMPURL=http://timestamp.comodoca.com
                        set CS_PK_CONTAINER=Sectigo_20240201141825
                        set CS_PIN="LLLvLL=rx+{^2-hM"
                        set CS_CERT="%CS_BASE_DIR%\\COMODO_EV.cer"
                        set CS_SIGNTOOL=%CS_BASE_DIR%\\etokensign\\x64\\Release\\etokensign.exe
                        set CS_TARGET_FILE=%CS_BASE_DIR%\\test\\test.exe
                        set CS_SIGN_DESC="Jami"

                        for /r %%f in (*.dll, *.exe) do if exist %%f %CS_SIGNTOOL% %CS_CERT% %CS_PK_CONTAINER% %CS_PIN% %CS_TIMESTAMPURL% %%f %CS_SIGN_DESC% || exit /b 1

                        set VSInstallerFolder="%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer"
                        pushd %VSInstallerFolder%
                        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
                          set VSLATESTDIR=%%i
                        )
                        popd
                        set path=%path:"=%

                        call "%VSLATESTDIR%"\\VC\\Auxiliary\\Build\\vcvarsall.bat amd64 10.0.16299.0
                        cd ../..

                        if "${params.BETA}" == "true" (

                            set MSI_FILENAME=jami.beta.x64.msi
                            set FILENAME_PREFIX=jami_x86_64_beta
                            set CONFIGURAION=Beta
                        )
                        else (
                            set MSI_FILENAME=jami.release.x64.msi
                            set FILENAME_PREFIX=jami_x86_64
                            set CONFIGURAION=Release
                        )

                        %MSBUILD% JamiInstaller\\JamiInstaller.wixproj /verbosity:normal /p:Configuration=%CONFIGURAION% /nologo /p:useenv=true /p:Platform=x64 /maxcpucount:%NUMBER_OF_PROCESSORS% || exit /b 1

                        cd ${INSTALLER_DIR}
                        %CS_SIGNTOOL% %CERT% %CS_PK_CONTAINER% %CS_PIN% %CS_TIMESTAMPURL% %MSI_FILENAME% %CS_SIGN_DESC% || exit /b 1

                        %CS_VER_TOOL% verify /pa /v %MSI_FILENAME% || exit /b 1

                        bash -c "cp %MSI_FILENAME% '%FILENAME-PREFIX%-${VERSION_TAG}.msi'"
                        bash -c "cp ../../../../x64/Release/Jami.pdb '%FILENAME-PREFIX%-${VERSION_TAG}.pdb'"

                    """
                }
            }
        }

        stage('publish') {
            when {
                expression { params.ARCHIVE == false }
            }
            steps {
                sshagent(credentials: [DL_SSH_KEY]) {
                    dir(CLIENT_DIR) {
                        script {
                            def remoteBaseDir
                            if (params.BETA == true) {
                                remoteBaseDir = '/srv/repository/ring/windows-test/beta/'
                            }
                            else {
                                remoteBaseDir = '/srv/repository/ring/windows-test/release'
                            }
                            bat """
                                echo ${VERSION_TAG} > version
                                bash -c "scp -v '${INSTALLER_DIR}/jami_x86_64_beta-${VERSION_TAG}.msi' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/archive"
                                bash -c "scp -v '${INSTALLER_DIR}/jami_x86_64_beta-${VERSION_TAG}.pdb' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/archive"
                                bash -c "scp -v 'version' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/version"
                                bash -c "ssh ${SSH_HOST_DL_RING_CX} ln -fs '${remoteBaseDir}/archive/jami_x86_64_beta-${VERSION_TAG}.msi' '${remoteBaseDir}/jami.beta.x64.msi'"
                            """
                        }
                    }
                }
            }
        }

        stage('archive') {
            when {
                expression { params.ARCHIVE != false }
            }
            steps {
                dir(CLIENT_DIR) {
                    script {
                        archiveArtifacts artifacts: "JamiInstaller/bin/Release/en-us/jami_x86_64_beta-${VERSION_TAG}.msi"
                        archiveArtifacts artifacts: "x64/Release/Jami.pdb"
                    }
                }
            }
        }
    }
}