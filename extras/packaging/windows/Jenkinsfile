pipeline {
    agent { label 'builder-win' }

    environment {
        DL_SSH_KEY = '5825b39b-dfc6-435f-918e-12acc1f56221'
    }

    options {
        ansiColor('xterm')
    }

    parameters {
        string(name: 'VERSION_TAG',
                description: 'Beta version tag.')
        string(name: 'GERRIT_REFSPEC',
                defaultValue: 'refs/heads/master',
                description: 'The gerrit refspec to fetch.')
    }

    stages {
        stage('Check version tag') {
            steps {
                script {
                    if (!env.VERSION_TAG) {
                        env.VERSION_TAG = sh(
                            returnStdout: true,
                            script: 'date +"%Y%m%d%H%M"'
                        ).trim()
                    }
                }
            }
        }

        stage('SCM Checkout') {
            when {
                expression { env.GERRIT_REFSPEC?.trim() }
            }
            steps {
                // Wipe workspace and fetch jami-daemon
                checkout changelog: true, poll: false,
                    scm: [$class: 'GitSCM',
                        branches: [[name: 'FETCH_HEAD']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'CloneOption', noTags: true, reference: '', shallow: true],
                            [$class: 'WipeWorkspace']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[refspec: '${GERRIT_REFSPEC}', url: 'https://${JAMI_GERRIT_URL}/jami-client-qt']]]
            }
        }

        stage('Init repository') {
            steps {
                script {
                    sh """
                        git rev-parse HEAD
                        git submodule update --init --recursive
                    """
                }
                script {
                    env.CLIENT_DIR = "${pwd()}\\jami-client-qt"
                    env.DAEMON_DIR = "${env.CLIENT_DIR}\\daemon"
                    env.INSTALLER_DIR = "${env.CLIENT_DIR}\\JamiInstaller\\bin\\Beta\\en-us"
                }
                dir("${env.CLIENT_DIR}") {
                    bat """
                        setlocal enabledelayedexpansion
                        @echo off
                        echo ${env.VERSION_TAG} > beta_tag
                        @echo on
                    """
                }
            }
        }

        stage('Build libjami') {
            steps {
                dir("${env.DAEMON_DIR}") {
                    bat """
                        dir extras\\scripts\\
                        python extras/scripts/winmake.py --base-dir compat/msvc
                    """
                }
            }
        }

        stage('Build client') {
            steps {
                dir("${env.CLIENT_DIR}") {
                    bat """
                        python extras/scripts/build-windows.py --init || exit /b 1
                        python extras/scripts/build-windows.py --qt=${QT_LATEST_PATH} --build-version=${env.VERSION_TAG} --enable-crash-reports --crash-report-url=${CRASH_REPORT_URL} --beta || exit /b 1
                    """
                }
            }
        }

        stage('Create Client Installer') {
            steps {
                dir("${env.CLIENT_DIR}") {
                    bat """
                        cd x64\\Beta

                        set BASE_DIR=C:\\Users\\jenkins-jami\\jenkins\\signing
                        set TIMESTAMPURL=http://timestamp.comodoca.com
                        set PK_CONTAINER=Sectigo_20240201141825
                        set PIN="LLLvLL=rx+{^2-hM"
                        set CERT="%BASE_DIR%\\COMODO_EV.cer"
                        set SIGNTOOL=%BASE_DIR%\\etokensign\\x64\\Release\\etokensign.exe
                        set TARGET_FILE=%BASE_DIR%\\test\\test.exe
                        set VER_TOOL="C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.22000.0\\x64\\signtool.exe"
                        set SIGN_DESC="Jami"

                        for /r %%f in (*.dll, *.exe) do if exist %%f %SIGNTOOL% %CERT% %PK_CONTAINER% %PIN% %TIMESTAMPURL% %%f %SIGN_DESC% || exit /b 1

                        set VSInstallerFolder="%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer"
                        pushd %VSInstallerFolder%
                        for /f "usebackq tokens=*" %%i in (`vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (
                          set VSLATESTDIR=%%i
                        )
                        popd
                        set path=%path:"=%

                        call "%VSLATESTDIR%"\\VC\\Auxiliary\\Build\\vcvarsall.bat amd64 10.0.16299.0
                        cd ../..
                        set VCRedistMergeModule=C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Redist\\MSVC\\v142\\MergeModules\\Microsoft_VC142_CRT_x64.msm
                        set MSBUILD="C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
                        %MSBUILD% JamiInstaller\\JamiInstaller.wixproj /verbosity:normal /p:Configuration=Beta /nologo /p:useenv=true /p:Platform=x64 /maxcpucount:%NUMBER_OF_PROCESSORS% || exit /b 1

                        cd ${env.INSTALLER_DIR}
                        %SIGNTOOL% %CERT% %PK_CONTAINER% %PIN% %TIMESTAMPURL% "jami.beta.x64.msi" %SIGN_DESC% || exit /b 1

                        %VER_TOOL% verify /pa /v "jami.beta.x64.msi" || exit /b 1

                        bash -c "cp jami.beta.x64.msi 'jami_x86_64_beta-${env.VERSION_TAG}.msi'"
                        bash -c "cp ../../../../x64/Beta/Jami.pdb 'jami_x86_64_beta-${env.VERSION_TAG}.pdb'"
                    """
                }
            }
        }

        stage('Publish or Archive') {
            steps {
                script {
                    if (env.ARCHIVE == 'false') {
                        sshagent(credentials: [env.DL_SSH_KEY]) {
                            dir("${env.CLIENT_DIR}") {
                                def remoteBaseDir = '/srv/repository/ring/windows-test/beta/'
                                bat """
                                    bash -c "scp -v '${env.INSTALLER_DIR}/jami_x86_64_beta-${env.VERSION_TAG}.msi' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/archive"
                                    bash -c "scp -v '${env.INSTALLER_DIR}/jami_x86_64_beta-${env.VERSION_TAG}.pdb' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/archive"
                                    bash -c "scp -v 'beta_tag' ${SSH_HOST_DL_RING_CX}:${remoteBaseDir}/version"
                                    bash -c "ssh ${SSH_HOST_DL_RING_CX} ln -fs '${remoteBaseDir}/archive/jami_x86_64_beta-${env.VERSION_TAG}.msi' '${remoteBaseDir}/jami.beta.x64.msi'"
                                """
                            }
                        }
                    } else {
                        dir("${env.CLIENT_DIR}") {
                            archiveArtifacts artifacts: "JamiInstaller/bin/Beta/en-us/jami.beta.x64.msi"
                            archiveArtifacts artifacts: "x64/Beta/Jami.pdb"
                        }
                    }
                }
            }
        }
    }
}